pragma solidity ^0.4.19; //1. ระบุเวอร์ชั่นของ Solidity ตรงนี้

//2. สร้างContract ตรงนี้
contract ZombieFactory {

    // เราจะทำการประกาศอีเวนท์ตรงนี้
    event NewZombie(uint zombieId, string name, uint dna);

    //start here
    uint dnaDigits = 16;
    //เริ่มที่ตรงนี้
    uint dnaModulus = 10 ** dnaDigits;
    // start here
    struct Zombie {
        string name;
        uint dna;
    }
    // start here
    Zombie[] public zombies;
    // เริ่มตรงนี้
    /* function createZombie(string _name, uint _dna) {
        // เริ่มที่ตรงนี้
        zombies.push(Zombie(_name, _dna));
    } */ 
    function _createZombie(string _name, uint _dna) private {
        // zombies.push(Zombie(_name, _dna));
        // and fire it here
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        NewZombie(id, _name, _dna);
    }
    // start here
    function _generateRandomDna(string _str) private view returns (uint) {
        // start here
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }
    // start here
    function createRandomZombie(string _name) public {
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }
}





/* 

ในการที่จะสร้างกองทัพซอมบี้ เรามาลองสร้างฐานของ contract โดยใช้ชื่อว่า ZombieFactory

ในกล่องด้านขวาให้ระบุตามขั้นตอนที่ได้กล่าวมา เพื่อให้เวอร์ชั่นของ Solidity ที่เราจะใช้คือเวอร์ชั่น 0.40.19

สร้าง contract เปล่าขึ้นมาแล้วใช้ชื่อว่า ZombieFactory


Zombie DNA ของเรานั้นจะถูกกำหนดโดยตัวเลขจำนวน 16 ตัว
ประกาศข้อมูลชนิด uint โดยใช้ชื่อว่า dnaDigits และตั้งให้มีค่าเท่ากับ 16


เพื่อทำให้มั่นใจว่า DNA ซอมบี้ของเรานั้นจะมีความยาวแค่ 16 ตัว ลองมาทำการให้ uint มีค่าเท่ากับ 10^16 วิธีนี้จะทำให้เราสามารถนำ Modulus operator % มาใช้ทำให้ข้อมูลสั้นลงเป็น 16 ตัวได้

สร้างข้อมูลชนิด uint โดยใช้ชื่อว่า dnaModulus และกำหนดค่าให้เท่ากับ 10ยกกำลังด้วย dnaDigits


ในแอพพลิเคชั่นของเรานั้น ต้องการที่จะสร้างซอมบี้ขึ้นมาจำนวนหนึ่ง และซอมบี้ก็จะต้องมีหลายๆคุณสมบัติอีกด้วย เราจึงจะใช้กรณีนี้เป็นตัวอย่างในการใช้คำสั่ง struct

สร้าง struct ขึ้นมาโดยใช้ชื่อว่า Zombie

ซอมบี้ของเรานั้นจะมี struct ที่มี 2 คุณสมบัติ ได้แก่: name (เป็น string) และ dna (เป็น uint)


ตอนนี้เรากำลังต้องการที่จะบรรจุค่าของกองกำลังซอมบี้ ลงในแอพพลิเคชั่นของเรา และต้องการที่จะให้จำนวนของซอมบี้ทั้งหมดนั้น ไปปรากฏอยู่ในแอพพลิเคชั่นอื่นๆ เช่นกัน ซึ่งนั่นก็แปลว่าเราต้องการให้กองกำลังของซอมบี้นั้นมีค่าเป็นสาธารณะ(public)

สร้าง public array ของ Zombie structs แล้วตั้งชื่อว่า zombies


ในแอพพลิเคชั่นของเรานั้นต้องการฟังก์ชั่นที่เอาไว้สร้างซอมบี้ขึ้นมา เราจะมาสร้างฟังก์ชั่นนี้กัน

สร้างฟังก์ชั่นขึ้นโดยใช้ชื่อว่า createZombie โดยควรสามารถรับตัวแปรได้ดังนี้ _name (เป็น string) และ _dna (เป็น uint)
และปล่อยส่วน body ของฟังก์ชั่นให้ว่างไปก่อนเพราะเราจะมาเขียนในภายหลัง


เริ่มจากการให้ ฟังก์ชั่น createZombie ของเราทำอะไรบางอย่างดู!

เติม function ในส่วนของ body โดยทำให้มันสร้าง new Zombie ใหม่ขึ้นมา จากนั้นก็ให้เพิ่มลงไปยัง array ที่ชื่อว่า zombies โดย name และ dna ที่เป็นข้อมูลของ new ‘Zombie’ นั้นควรถูกนำมาจาก function arguments
ทำโค้ดให้อยู่ในบรรทัดเดียวเพื่อความเรียบร้อย


ฟังก์ชั่น createZombie ใน contract ของเรานั้นมีค่าเป็น public ซึ่งเป็นค่าเริ่มต้น ซึ่งก็แปลว่าใครก็ตามก็สามารถที่จะเรียกฟังก์ชั่นนี้ และสามารถสร้างซอมบี้ขึ้นมาภายใน contract ของเราได้!! มาทำให้ฟังก์ชั่นนี้มีค่าเป็น private กัน

ปรับแต่งฟังก์ชั่น createZombie ให้มีค่าเป็น private function และอย่าลืมการตั้งชื่อฟังก์ชั่นที่เป็นprivate ให้มีการนำหน้าชื่อฟังก์ชั่นด้วยเครื่องหมายสัญประกาศนะ!


ตอนนี้เราต้องการฟังก์ชั่นตัวช่วยที่จะสร้างเลข DNA แบบสุ่มขึ้นมาจากข้อมูลชนิด string

สร้างฟังก์ชั่นชนิด private ขึ้นโดยใช้ชื่อว่า _generateRandomDNA ซึ่งฟังก์ชั่นนี้ต้องการพารามิเตอร์ชื่อว่า _str (เป็น string) และมีการรีเทิร์นค่าออกมาเป็นข้อมูลชนิด uint

ในฟังก์ชั่นนี้จะสามารถดูตัวแปรบางตัวใน contract ของเราได้ แต่ไม่สามารถที่จะเปลี่ยนแปลงค่าอะไรใดๆ ได้ ดังนั้นฟังก์ชั่นนี้จะมีค่าเป็น view

ตอนนี้ปล่อยส่วน body ของฟังก์ชั่นให้ยังโล่งไปก่อน เพราะเราจะมาใส่ในภายหลัง



เราจะมาเริ่มทำการใส่โค้ดในส่วน body ของฟังก์ชัน _generateRandomDna กัน! ซึ่งนี่คือสิ่งที่จะต้องทำ

ในโค้ดบรรทัดแรกนั้นควรมีเลขแฮช keccak256 ของ _str เพื่อที่จะสร้างเลขกึ่งสุ่มแบบ hexadecimal ขึ้นมา และต้อง typecast ข้อมูลให้อยู่เป็นชนิด uint สุดท้ายแล้วจึงเก็บค่าผลลัพธ์ให้เป็นข้อมูลชนิด uint ให้ชื่อว่า rand

เราต้องการความยาวของ DNA ก็มีเพียงแค่ 16 ตัว (ใช้ dnaModulus นั่นเอง) ดังนั้นในโค้ดบรรทัดที่ 2 ควรต้องรีเทิร์น ค่าที่ได้จากในข้อ 1.แล้วนำมาหารเอาเศษ (การ % Modulus) กับค่า dnaModulus



สร้างฟังก์ชั่นชนิด public โดยใช้ชื่อว่า createRandomZombie โดยฟังก์ชั่นนี้จะรับค่าพารามิเตอร์ชื่อว่า _name (เป็น string) (โน้ต: ประกาศฟังก์ชั่นนี้ให้เป็นชนิด public ด้วยวิธีที่เหมือนกับการประกาศค่าฟังก์ชั่นในตัวอย่างก่อนหน้าให้เป็น private)

ในบรรทัดแรกของฟังก์ชันจะต้องทำการรันฟังก์ชัน _generateRandomDna บนพารามิเตอร์ _name และเก็บค่าไว้ในรูปของ uint ใช้ชื่อว่า randDna

บรรทัดที่2 ควรจะรันฟังก์ชัน _createZombie โดยเพิ่ม _name และ _randDna เข้าไป

โค้ดควรประกอบไปด้วย4บรรทัด (รวมsyntax ปิด } ของฟังก์ชันแล้ว)



เราต้องการ event ที่สามารถบอก front-end รู้ทุกๆ ครั้งที่มีการสร้างซอมบี้ใหม่ขึ้นมา เพื่อให้แอพพลิเคชั่นของเราแสดงผลออกมาได้

ประกาศ event โดยใช้ชื่อว่า NewZombie ซึ่งควรสามารถใส่ค่า zombieId(เป็น uint), name (เป็น string), และ dna (เป็น uint)

ปรับแต่งฟังก์ชั่น _createZombie เพื่อให้สามารถเตือนอีเว้นท์ NewZombie หลังจากเพิ่มซอมบี้ใหม่ เข้าไปใน array zombies

นอกจากนี้คุณยังต้องใช้คำสั่ง id array.push() ของซอมบี้ โดยให้ return ค่าออกมาเป็นข้อมูลชนิด uint ซึ่งจะเป็นความยาวของ array ใหม่หลังจากมีการเพิ่มซอมบี้เข้าไปแล้ว และเนื่องจากข้อมูลตัวแรกใน array มี index 0 ดังนั้น array.push()-1 ก็จะเป็น index ของซอมบี้ที่เราเพิ่งเพิ่มเข้าไป โดยจะทำการเก็บค่า zombies.push()-1 ในข้อมูลชนิด uint และเรียกว่า id เพื่อที่จะสามารถนำไปใช้ต่อในอีเว้นท์ชื่อ NewZombie ในบรรทัดต่อไป


https://share.cryptozombies.io/th/lesson/1/share/kazuoka

*/ 
